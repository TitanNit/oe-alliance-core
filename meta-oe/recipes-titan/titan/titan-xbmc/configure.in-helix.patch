--- a/tools/depends/configure.in	2015-05-08 09:45:28.000000000 +0200
+++ a/tools/depends/configure.in.patched	2015-05-08 10:05:26.000000000 +0200
@@ -146,6 +146,14 @@
     use_toolchain="${use_toolchain:-/usr}"
     platform_os="linux"
   ;;
+  mipsel-*-linux*)
+    use_cpu=$host_cpu
+    use_toolchain="${use_toolchain:-/usr}"
+    platform_cflags="-Os -fPIC -DPIC"
+    platform_ldflags="-Wl,-rpath-link=$prefix/$deps_dir/lib"
+    platform_cxxflags="$platform_cflags"
+    platform_os="linux"
+  ;;
   x86_64*-linux-gnu*|x86_64-*-linux-uclibc*)
     use_cpu=$host_cpu
     use_toolchain="${use_toolchain:-/usr}"

--- a/configure.in	2015-05-05 13:00:57.000000000 +0200
+++ a/configure.in.patched	2015-05-05 13:39:23.000000000 +0200
@@ -698,6 +698,17 @@
      use_wayland=no
      build_shared_lib=yes
      ;;
+  mipsel-*-linux*|mipsel*linux)
+     target_platform=target_dvbbox
+     ARCH="mips"
+     use_arch="mips"
+     use_joystick=no
+     use_gles=yes
+     use_gl=no
+     use_sdl=no
+     use_wayland=no
+     USE_STATIC_FFMPEG=1
+     ;;
   *)
      AC_MSG_ERROR(unsupported host ($host))
 esac
@@ -734,6 +745,23 @@
      CFLAGS="$CFLAGS"
      CXXFLAGS="$CXXFLAGS"
      ;;
+  dvbbox)
+     target_platform=target_dvbbox
+     ARCH="mips"
+     use_arch="mips"
+     ffmpeg_target_os=linux
+     use_joystick=no
+     use_gles=yes
+     use_sdl=no
+     use_x11=no
+     use_alsa="no"
+     use_wayland=no
+     USE_STATIC_FFMPEG=1
+     AC_DEFINE(HAS_EGLGLES, [1], [Define if supporting EGL based GLES Framebuffer])
+     USE_DVBBOX_EGL=1
+     CFLAGS="$CFLAGS"
+     CXXFLAGS="$CXXFLAGS"
+     ;;
 esac
 
 XBMC_SETUP_ARCH_DEFINES()

--- a/m4/xbmc_arch.m4	2015-05-07 17:12:51.000000000 +0200
+++ a/m4/xbmc_arch.m4.patched	2015-05-07 17:35:48.000000000 +0200
@@ -32,6 +32,9 @@
   arm*-*-linux-gnu*|arm*-*-linux-uclibc*)
      AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX")
      ;;
+  mipsel-*-linux*|mipsel*linux)
+     AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -D_MIPSEL -DTARGET_DVBBOX")
+     ;;
   *-*linux-android*)
      AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -DTARGET_ANDROID")
      ;;

--- a/addons/library.xbmc.addon/libXBMC_addon.h
+++ b/addons/library.xbmc.addon/libXBMC_addon.h
@@ -55,8 +55,8 @@ typedef intptr_t      ssize_t;
 #define ADDON_HELPER_ARCH       "powerpc64-linux"
 #elif defined(__ARMEL__)
 #define ADDON_HELPER_ARCH       "arm"
-#elif defined(_MIPSEL)
-#define ADDON_HELPER_ARCH       "mipsel-linux"
+#elif defined(__mips__)
+#define ADDON_HELPER_ARCH       "mips"
 #else
 #define ADDON_HELPER_ARCH       "i486-linux"
 #endif

--- a/Makefile.in	2015-05-07 17:47:04.000000000 +0200
+++ a/Makefile.in.patched	2015-05-07 17:49:24.000000000 +0200
@@ -441,7 +441,7 @@
   endif
 endif
 	$(MAKE) -C lib/stsound/StSoundLibrary
-ifeq ($(or $(findstring powerpc,@ARCH@),$(findstring x86_64-linux,@ARCH@),$(findstring arm, @ARCH@),$(findstring freebsd,@ARCH@)),)
+ifeq ($(or $(findstring powerpc,@ARCH@),$(findstring x86_64-linux,@ARCH@),$(findstring arm, @ARCH@),$(findstring freebsd,@ARCH@),$(findstring mips,@ARCH@)),)
 	$(MAKE) -C lib/snesapu/SNES/SNESAPU
 endif
 imagelib: dllloader

--- a/xbmc/cores/DllLoader/DllLoader.h	2015-05-07 17:47:06.000000000 +0200
+++ a/xbmc/cores/DllLoader/DllLoader.h.patched	2015-05-07 17:51:35.000000000 +0200
@@ -23,7 +23,7 @@
 #include "coffldr.h"
 #include "LibraryLoader.h"
 
-#if defined(__linux__) && !defined(__powerpc__) && !defined(__arm__)
+#if defined(__linux__) && !defined(__powerpc__) && !defined(__arm__) && !defined(__mips__)
 #define USE_LDT_KEEPER
 #include "ldt_keeper.h"
 #endif

--- a/xbmc/cores/DllLoader/ldt_keeper.c	2015-05-07 17:47:06.000000000 +0200
+++ a/xbmc/cores/DllLoader/ldt_keeper.c.patched	2015-05-07 17:53:51.000000000 +0200
@@ -19,7 +19,7 @@
  */
 
 //#ifndef __powerpc__
-#if !defined(__powerpc__) && !defined(__ppc__) && !defined(__arm__)
+#if !defined(__powerpc__) && !defined(__ppc__) && !defined(__arm__) && !defined(__mips__)
 
 #include "ldt_keeper.h"
 
--- a/xbmc/linux/PlatformDefs.h	2015-05-07 17:47:06.000000000 +0200
+++ a/xbmc/linux/PlatformDefs.h.patched	2015-05-07 17:55:29.000000000 +0200
@@ -161,7 +161,7 @@
 #define __int64   long long
 #define __uint64  unsigned long long
 
-#if defined(__x86_64__) || defined(__powerpc__) || defined(__ppc__) || defined (__arm__) // should this be powerpc64 only?
+#if defined(__x86_64__) || defined(__powerpc__) || defined(__ppc__) || defined (__arm__) || defined(__mips__) // should this be powerpc64 only?
 #define __stdcall
 #else /* !__x86_64__ */
 #define __stdcall   __attribute__((__stdcall__))

--- a/xbmc/utils/fastmemcpy.c	2015-05-07 17:47:06.000000000 +0200
+++ a/xbmc/utils/fastmemcpy.c.patched	2015-05-07 17:56:37.000000000 +0200
@@ -25,7 +25,7 @@
  *  <http://www.gnu.org/licenses/>.
  *
  */
-#if !defined(TARGET_WINDOWS) && !defined(__ppc__) && !defined(__powerpc__) && !defined(__arm__) 
+#if !defined(TARGET_WINDOWS) && !defined(__ppc__) && !defined(__powerpc__) && !defined(__arm__) && !defined(__mips__) 
 #define HAVE_MMX2
 #define HAVE_SSE
 
--- a/xbmc/utils/fastmemcpy.h	2015-05-07 17:47:06.000000000 +0200
+++ a/xbmc/utils/fastmemcpy.h.patched	2015-05-07 17:57:32.000000000 +0200
@@ -23,8 +23,8 @@
 extern "C" {
 #endif
 
-#if !defined(TARGET_WINDOWS) && !defined(__ppc__) && !defined(__powerpc__) && !defined(TARGET_ANDROID) && !defined(TARGET_DARWIN_IOS)
-void * fast_memcpy(void * to, const void * from, size_t len);
+#if !defined(TARGET_WINDOWS) && !defined(__ppc__) && !defined(__powerpc__) && !defined(__mips__) && !defined(TARGET_ANDROID) && !defined(TARGET_DARWIN_IOS)
+void * fast_memcpy(void * to, const void * from, size_t len);
 //#define fast_memcpy memcpy
 #else
 #define fast_memcpy memcpy

--- a/tools/depends/target/ffmpeg/Makefile	2015-05-07 18:06:13.000000000 +0200
+++ a/tools/depends/target/ffmpeg/Makefile.patched	2015-05-07 18:09:39.000000000 +0200
@@ -47,6 +47,9 @@
 ifeq ($(findstring arm, $(CPU)), arm)
   ffmpg_config += --enable-pic --disable-armv5te --disable-armv6t2
 endif
+ifeq ($(findstring mips, $(CPU)), mips)
+  ffmpg_config += --disable-mips32r2 --disable-mipsdspr1 --disable-mipsdspr2
+endif
 ifeq ($(Configuration), Release)
   ffmpg_config += --disable-debug
 endif

--- a/tools/depends/target/ffmpeg/autobuild.sh	2015-05-07 18:06:13.000000000 +0200
+++ a/tools/depends/target/ffmpeg/autobuild.sh.patched	2015-05-07 18:10:53.000000000 +0200
@@ -155,6 +155,9 @@
 	--enable-nonfree \
 	--enable-pthreads \
 	--enable-zlib \
+	--disable-mips32r2 \
+	--disable-mipsdspr1 \
+	--disable-mipsdspr2 \
         ${FLAGS}
 
 make -j ${BUILDTHREADS} 

--- a/xbmc/utils/MathUtils.h	2015-05-07 18:24:38.000000000 +0200
+++ a/xbmc/utils/MathUtils.h.patched	2015-05-07 18:28:48.000000000 +0200
@@ -34,6 +34,7 @@
 
 #if defined(__ppc__) || \
     defined(__powerpc__) || \
+    defined(__mips__) || \
     defined(__arm__)
   #define DISABLE_MATHUTILS_ASM_ROUND_INT
 #endif

--- a/xbmc/cores/VideoRenderers/LinuxRendererGL.h	2015-05-07 18:24:38.000000000 +0200
+++ a/xbmc/cores/VideoRenderers/LinuxRendererGL.h.patched	2015-05-07 18:32:26.000000000 +0200
@@ -325,8 +325,7 @@
 
 
 inline int NP2( unsigned x ) {
-#if defined(TARGET_POSIX) && !defined(__POWERPC__) && !defined(__PPC__) && !defined(__arm__)
-  // If there are any issues compiling this, just append a ' && 0'
+#if defined(TARGET_POSIX) && !defined(__POWERPC__) && !defined(__PPC__) && !defined(__arm__) && !defined(__mips__)  // If there are any issues compiling this, just append a ' && 0'
   // to the above to make it '#if defined(TARGET_POSIX) && 0'
 
   // Linux assembly is AT&T Unix style, not Intel style

--- a/xbmc/windowing/egl/Makefile.in	2015-05-17 19:14:10.000000000 +0200
+++ a/xbmc/windowing/egl/Makefile.in.patched	2015-05-19 15:54:22.000000000 +0200
@@ -25,6 +25,8 @@
        wayland/XBMCSurface.cpp
 endif
 
+SRCS+= EGLNativeTypeDvbBox.cpp
+
 LIB = windowing_egl.a
 
 include ../../../Makefile.include

--- a/xbmc/windowing/egl/EGLNativeTypeDvbBox.h	2015-05-19 15:47:51.000000000 +0200
+++ a/xbmc/windowing/egl/EGLNativeTypeDvbBox.h.patched	2015-05-02 20:17:20.000000000 +0200
@@ -0,0 +1,60 @@
+#pragma once
+
+/*
+ *      Copyright (C) 2011-2012 Team XBMC
+ *      http://www.xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "EGLNativeType.h"
+
+#include <vector>
+#include <string>
+
+class CEGLNativeTypeDvbBox : public CEGLNativeType
+{
+public:
+  CEGLNativeTypeDvbBox()
+  {
+	  m_nativeWindow = 0;
+	  m_nativeDisplay = 0;
+  };
+  virtual ~CEGLNativeTypeDvbBox() {};
+  virtual std::string GetNativeName() const { return "dvbbox"; };
+  virtual bool  CheckCompatibility();
+  virtual void  Initialize();
+  virtual void  Destroy();
+  virtual int   GetQuirks() { return EGL_QUIRK_NONE; };
+
+  virtual bool  CreateNativeDisplay();
+  virtual bool  CreateNativeWindow();
+  virtual bool  GetNativeDisplay(XBNativeDisplayType **nativeDisplay) const;
+  virtual bool  GetNativeWindow(XBNativeWindowType **nativeWindow) const;
+
+  virtual bool  DestroyNativeWindow();
+  virtual bool  DestroyNativeDisplay();
+
+  virtual bool  GetNativeResolution(RESOLUTION_INFO *res) const;
+  virtual bool  SetNativeResolution(const RESOLUTION_INFO &res);
+  virtual bool  ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions);
+  virtual bool  GetPreferredResolution(RESOLUTION_INFO *res) const;
+
+  virtual bool  ShowWindow(bool show);
+private:
+  RESOLUTION_INFO m_desktopRes;
+  RESOLUTION_INFO m_desktopResAll[3];
+};
--- a/xbmc/windowing/egl/EGLNativeTypeDvbBox.cpp	2015-05-19 15:47:44.000000000 +0200
+++ a/xbmc/windowing/egl/EGLNativeTypeDvbBox.cpp.patched	2015-05-02 20:17:20.000000000 +0200
@@ -0,0 +1,177 @@
+/*
+ *      Copyright (C) 2011-2012 Team XBMC
+ *      http://www.xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+#include "system.h"
+#include "EGLNativeTypeDvbBox.h"
+#include "utils/StringUtils.h"
+#include "utils/log.h"
+#include "guilib/gui3d.h"
+#include "linux/DllBCM.h"
+
+#include <stdio.h>
+#include <malloc.h>
+#include <assert.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "gles_init.h"
+
+using namespace std;
+
+bool CEGLNativeTypeDvbBox::CheckCompatibility()
+{
+  return true;
+}
+
+void CEGLNativeTypeDvbBox::Initialize()
+{
+}
+
+void CEGLNativeTypeDvbBox::Destroy()
+{
+}
+
+bool CEGLNativeTypeDvbBox::CreateNativeDisplay()
+{
+  GLES_Native_Init();
+  return GLES_Native_CreateNativeDisplay(&m_nativeDisplay);
+}
+
+bool CEGLNativeTypeDvbBox::CreateNativeWindow()
+{
+  m_nativeWindow = GLES_Native_CreateNativeWindow();
+  if (!m_nativeWindow) {
+	  return false;
+  }
+  return true;
+}
+
+bool CEGLNativeTypeDvbBox::GetNativeDisplay(XBNativeDisplayType **nativeDisplay) const
+{
+  *nativeDisplay = (XBNativeDisplayType*) &m_nativeDisplay;
+  return true;
+}
+
+bool CEGLNativeTypeDvbBox::GetNativeWindow(XBNativeDisplayType **nativeWindow) const
+{
+  *nativeWindow = (XBNativeWindowType*) &m_nativeWindow;
+  return true;
+}  
+
+bool CEGLNativeTypeDvbBox::DestroyNativeDisplay()
+{
+  GLES_Native_DestroyNativeDisplay();
+  return true;
+}
+
+bool CEGLNativeTypeDvbBox::DestroyNativeWindow()
+{
+  GLES_Native_DestroyNativeWindow();
+  return true;
+}
+
+bool CEGLNativeTypeDvbBox::GetNativeResolution(RESOLUTION_INFO *res) const
+{
+  *res = m_desktopRes;
+  return true;
+}
+
+bool CEGLNativeTypeDvbBox::SetNativeResolution(const RESOLUTION_INFO &res)
+{
+  m_desktopRes = res;
+  return true;
+}
+
+bool CEGLNativeTypeDvbBox::ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions)
+{
+  resolutions.clear();
+
+  m_desktopResAll[0].iScreen      = 0;
+  m_desktopResAll[0].bFullScreen  = true;
+  m_desktopResAll[0].iWidth       = 1280;
+  m_desktopResAll[0].iHeight      = 720;
+  m_desktopResAll[0].iScreenWidth = 1280;
+  m_desktopResAll[0].iScreenHeight= 720;
+  m_desktopResAll[0].dwFlags      =  D3DPRESENTFLAG_PROGRESSIVE;
+  m_desktopResAll[0].fRefreshRate = 50;
+  m_desktopResAll[0].strMode = StringUtils::Format("%dx%d", 1280, 720);
+  m_desktopResAll[0].strMode = StringUtils::Format("%s @ %.2f%s - Full Screen", m_desktopRes.strMode.c_str(), (float)50,m_desktopRes.dwFlags & D3DPRESENTFLAG_INTERLACED ? "i" : "");
+
+  m_desktopResAll[0].iSubtitles   = (int)(0.965 * m_desktopResAll[0].iHeight);
+
+  CLog::Log(LOGDEBUG, "EGL initial desktop resolution %s\n", m_desktopResAll[0].strMode.c_str());
+
+  resolutions.push_back(m_desktopResAll[0]);
+
+  m_desktopResAll[1].iScreen      = 0;
+  m_desktopResAll[1].bFullScreen  = true;
+  m_desktopResAll[1].iWidth       = 1280;
+  m_desktopResAll[1].iHeight      = 720;
+  m_desktopResAll[1].iScreenWidth = 1280;
+  m_desktopResAll[1].iScreenHeight= 720;
+  m_desktopResAll[1].dwFlags      =  D3DPRESENTFLAG_PROGRESSIVE;
+//by doliyu . for 3D Movie support.
+  m_desktopResAll[1].dwFlags      |=  D3DPRESENTFLAG_MODE3DSBS;
+  m_desktopResAll[1].fRefreshRate = 50;
+  m_desktopResAll[1].strMode = StringUtils::Format("%dx%d", 1280, 720);
+  m_desktopResAll[1].strMode = StringUtils::Format("%s @ %.2f%s - Full Screen 3DSBS", m_desktopResAll[1].strMode.c_str(), (float)50,m_desktopResAll[1].dwFlags & D3DPRESENTFLAG_INTERLACED ? "i" : "");
+
+  m_desktopResAll[1].iSubtitles   = (int)(0.965 * m_desktopResAll[1].iHeight);
+
+  CLog::Log(LOGDEBUG, "EGL initial desktop resolution %s\n", m_desktopResAll[1].strMode.c_str());
+
+  resolutions.push_back(m_desktopResAll[1]);
+
+  m_desktopResAll[2].iScreen      = 0;
+  m_desktopResAll[2].bFullScreen  = true;
+  m_desktopResAll[2].iWidth       = 1280;
+  m_desktopResAll[2].iHeight      = 720;
+  m_desktopResAll[2].iScreenWidth = 1280;
+  m_desktopResAll[2].iScreenHeight= 720;
+  m_desktopResAll[2].dwFlags      =  D3DPRESENTFLAG_PROGRESSIVE;
+//by doliyu . for 3D Movie support.
+  m_desktopResAll[2].dwFlags      |=  D3DPRESENTFLAG_MODE3DTB;
+  m_desktopResAll[2].fRefreshRate = 50;
+  m_desktopResAll[2].strMode = StringUtils::Format("%dx%d", 1280, 720);
+  m_desktopResAll[2].strMode = StringUtils::Format("%s @ %.2f%s - Full Screen 3DTB", m_desktopResAll[2].strMode.c_str(), (float)50,m_desktopResAll[2].dwFlags & D3DPRESENTFLAG_INTERLACED ? "i" : "");
+
+  m_desktopResAll[2].iSubtitles   = (int)(0.965 * m_desktopResAll[2].iHeight);
+
+  CLog::Log(LOGDEBUG, "EGL initial desktop resolution %s\n", m_desktopResAll[2].strMode.c_str());
+
+  resolutions.push_back(m_desktopResAll[2]);
+
+  m_desktopRes = m_desktopResAll[0];
+
+  return true;
+}
+
+bool CEGLNativeTypeDvbBox::GetPreferredResolution(RESOLUTION_INFO *res) const
+{
+  *res = m_desktopResAll[0];
+  return true;
+}
+
+bool CEGLNativeTypeDvbBox::ShowWindow(bool show)
+{
+  return false;
+}
+
+
